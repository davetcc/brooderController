/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

#include <tcMenu.h>
#include "brooderIncubator_menu.h"

// Global variable declarations
const PROGMEM  ConnectorLocalInfo applicationInfo = { "Incubator", "6212819e-acb2-43cc-9982-5574ea4f17c9" };
AvrEeprom glAvrRom;
LiquidCrystal lcd(8, 7, 9, 10, 11, 12);
LiquidCrystalRenderer renderer(lcd, 16, 2);

// Global Menu Item declarations
const PROGMEM BooleanMenuInfo minfoBuzzer = { "Buzzer", 3, 0xffff, 1, NO_CALLBACK, NAMING_ON_OFF };
BooleanMenuItem menuBuzzer(&minfoBuzzer, false, NULL);
const PROGMEM BooleanMenuInfo minfoHeatLamp = { "Heat Lamp", 7, 0xffff, 1, NO_CALLBACK, NAMING_ON_OFF };
BooleanMenuItem menuHeatLamp(&minfoHeatLamp, false, &menuBuzzer);
const char enumStrSettingsFanMode_0[] PROGMEM = "Auto";
const char enumStrSettingsFanMode_1[] PROGMEM = "Manual";
const char enumStrSettingsFanMode_2[] PROGMEM = "Off";
const char* const enumStrSettingsFanMode[] PROGMEM  = { enumStrSettingsFanMode_0, enumStrSettingsFanMode_1, enumStrSettingsFanMode_2 };
const PROGMEM EnumMenuInfo minfoSettingsFanMode = { "Fan Mode", 10, 0xffff, 2, NO_CALLBACK, enumStrSettingsFanMode };
EnumMenuItem menuSettingsFanMode(&minfoSettingsFanMode, 0, NULL);
const char enumStrSettingsMode_0[] PROGMEM = "Brooder";
const char enumStrSettingsMode_1[] PROGMEM = "Incubator";
const char* const enumStrSettingsMode[] PROGMEM  = { enumStrSettingsMode_0, enumStrSettingsMode_1 };
const PROGMEM EnumMenuInfo minfoSettingsMode = { "Mode", 8, 6, 1, NO_CALLBACK, enumStrSettingsMode };
EnumMenuItem menuSettingsMode(&minfoSettingsMode, 0, &menuSettingsFanMode);
const PROGMEM AnalogMenuInfo minfoSettingsAccuracy = { "Accuracy", 6, 4, 6, NO_CALLBACK, 0, 2, "oC" };
AnalogMenuItem menuSettingsAccuracy(&minfoSettingsAccuracy, 0, &menuSettingsMode);
const PROGMEM AnalogMenuInfo minfoSettingsReqdTemp = { "Reqd Temp", 5, 2, 255, NO_CALLBACK, 0, 2, "oC" };
AnalogMenuItem menuSettingsReqdTemp(&minfoSettingsReqdTemp, 0, &menuSettingsAccuracy);
RENDERING_CALLBACK_NAME_INVOKE(fnSettingsRtCall, backSubItemRenderFn, "Settings", -1, NO_CALLBACK)
const PROGMEM SubMenuInfo minfoSettings = { "Settings", 4, 0xffff, 0, NO_CALLBACK };
BackMenuItem menuBackSettings(fnSettingsRtCall, &menuSettingsReqdTemp);
SubMenuItem menuSettings(&minfoSettings, &menuBackSettings, &menuHeatLamp);
const PROGMEM BooleanMenuInfo minfoFan = { "Fan", 2, 0xffff, 1, NO_CALLBACK, NAMING_ON_OFF };
BooleanMenuItem menuFan(&minfoFan, false, &menuSettings);
const PROGMEM AnalogMenuInfo minfoTemp = { "Temp", 1, 0xffff, 255, NO_CALLBACK, 0, 2, "oC" };
AnalogMenuItem menuTemp(&minfoTemp, 0, &menuFan);

void setupMenu() {
    // First we set up eeprom and authentication (if needed).
    menuMgr.setEepromRef(&glAvrRom);
    // Now add any readonly, non-remote and visible flags.
    menuTemp.setReadOnly(true);
    menuFan.setReadOnly(true);
    menuBuzzer.setReadOnly(true);
    menuHeatLamp.setReadOnly(true);

    // Code generated by plugins.
    lcd.setIoAbstraction(internalDigitalIo());
    lcd.begin(16, 2);
    renderer.setUpdatesPerSecond(4);
    switches.init(internalDigitalIo(), SWITCHES_POLL_EVERYTHING, true);
    menuMgr.initForEncoder(&renderer, &menuTemp, 2, A5, A4);
}

